/*
2 задание
Условие
Ограничение времени - 1 секунда
Ограничение памяти - 256 МБ
Ваня принес на кухню рулет, который он хочет разделить с коллегами. Для этого он хочет разрезать рулет на ﻿NN﻿ равных частей. 
Разумеется, рулет можно резать только поперек. Соответственно, Костя сделает ﻿N - 1N−1﻿ разрез ножом через равные промежутки.
По возвращению с кофе-брейка Ваня задумался — а можно ли было обойтись меньшим числом движений, 
будь нож Вани бесконечно длинным (иначе говоря, если он мог бы сделать сколько угодно разрезов за раз, если эти разрезы лежат на одной прямой)? 
Считается, что места для разрезов намечены заранее, и все разрезы делаются с ювелирной точностью.
Оказывается, что можно. Например, если Ваня хотел бы разделить рулет на ﻿44﻿ части, 
он мог бы обойтись двумя разрезами — сначала он разделил бы рулет на две половинки, 
а потом совместил бы две половинки и разрезал обе пополам одновременно.
Вам дано число ﻿N﻿, требуется сказать, каким минимальным числом разрезов можно обойтись.

Формат входных данных
Дано одно натуральное число ﻿N(1≤N≤2×10^9)﻿ — количество людей на кофе-брейке.

Формат выходных данных
Выведите одно число — минимальное число движений, которое придется сделать Косте.

Замечание
Чтобы разрезать рулет на ﻿6﻿ частей, Ване сначала придется разрезать его на две равные части, после чего совместить две половинки и сделать два разреза.
Чтобы разрезать рулет на ﻿5﻿ частей, Ване понадобится разделить его в соотношении ﻿2:3﻿, после чего совместить два рулета по левому краю и разрезать 
бОльший рулет на одинарные кусочки — меньший тоже разделится на одинарные.

Ввод    Вывод
6       3
5       3
 */

using System;

namespace Example2
{
    class Program
    {
        static void Main(string[] args)
        {
            if (int.TryParse(Console.ReadLine(), out int x) && x >= 1 && x <= 2 * Math.Pow(10, 9))
            {
                var result = 0;
                var p = 1;

                while (p < x && p > 0)
                {
                    result += 1;
                    p *= 2;
                }
                Console.WriteLine(result);
            }
            else
            {
                throw new Exception();
            }
        }
    }
}
